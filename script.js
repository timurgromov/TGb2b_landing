// ===== –í–ò–î–ï–û –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨ (–ù–ï –ú–ï–ù–Ø–¢–¨) =====
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".video-wrapper").forEach(wrapper => {
    const videoSrc = wrapper.dataset.video;
    const coverSrc = wrapper.dataset.cover;
    wrapper.innerHTML = `
      <div class="video-poster"><img src="${coverSrc}" alt=""></div>
      <div class="play-button"></div>`;
    const playBtn = wrapper.querySelector(".play-button");
    playBtn.addEventListener("click", () => {
      wrapper.innerHTML = `<video controls autoplay><source src="${videoSrc}" type="video/mp4"></video>`;
      const video = wrapper.querySelector("video");
      video.muted = false;
      video.volume = 1.0;
      video.play();
    });
  });
});

// ===== Scroll-Reveal –¥–ª—è .sr =====
(function(){
  document.documentElement.classList.add('js');
  const els = Array.from(document.querySelectorAll('.sr'));
  if (!els.length) return;

  const reduce = window.matchMedia && window.matchMedia('(prefers-reduced-motion: reduce)').matches;
  if (reduce || typeof IntersectionObserver === 'undefined'){
    els.forEach(el => el.classList.add('show'));
    return;
  }

  const io = new IntersectionObserver((entries)=>{
    entries.forEach(entry=>{
      if(!entry.isIntersecting) return;
      entry.target.classList.add('show');
      io.unobserve(entry.target);
    });
  },{threshold:0.12, rootMargin:'0px 0px -10% 0px'});

  els.forEach(el=>io.observe(el));
})();


// ===== –ú–æ–¥–∞–ª–∫–∞ "2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã" =====
(function(){
  const modal = document.getElementById('programs-modal');
  const openBtn = document.querySelector('[data-cta="programs_modal"]');
  const closeBtn = modal?.querySelector('.modal__close');
  const overlay = modal?.querySelector('.modal__overlay');

  if (!modal || !openBtn) return;

  function openModal() {
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  }

  function closeModal() {
    modal.classList.remove('active');
    document.body.style.overflow = '';
  }

  openBtn.addEventListener('click', openModal);
  closeBtn?.addEventListener('click', closeModal);
  overlay?.addEventListener('click', closeModal);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal.classList.contains('active')) {
      closeModal();
    }
  });
})();

// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ú–µ—Ç—Ä–∏–∫–∏ =====
const COUNTER_ID = 104468814;

// ===== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ CTA –∫–ª–∏–∫–æ–≤ =====
(function(){
  window.dataLayer = window.dataLayer || [];

  const log = (label) => {
    const event = { event: 'cta_click', label, ts: Date.now() };
    window.dataLayer.push(event);
    console.log(event);

    if (typeof ym === 'function') {
      ym(COUNTER_ID, 'reachGoal', 'cta_click_' + label);
    } else {
      console.warn('–ú–µ—Ç—Ä–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–±—ã—Ç–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', label);
    }
  };

  document.querySelectorAll('[data-cta]').forEach(el => {
    el.addEventListener('click', () => {
      const label = el.getAttribute('data-cta') || 'cta';
      log(label);
    });
  });
})();

// –£—Ç–∏–ª–∏—Ç–∞: –¥–µ–±–∞—É–Ω—Å
function debounce(fn, t=120){ let id=null; return (...a)=>{ clearTimeout(id); id=setTimeout(()=>fn(...a), t);} }

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ body –±–µ–∑ ¬´—Å–∫–∞—á–∫–∞¬ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã
let __scrollY = 0;
function lockPageScroll() {
  __scrollY = window.scrollY || document.documentElement.scrollTop || 0;
  document.documentElement.classList.add('is-modal-open');
  document.body.classList.add('is-modal-open');
  // —Ñ–∏–∫—Å–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –±–µ–∑ —Å–¥–≤–∏–≥–∞ –º–∞–∫–µ—Ç–∞
  document.body.style.position = 'fixed';
  document.body.style.top = `-${__scrollY}px`;
  document.body.style.left = '0';
  document.body.style.right = '0';
  document.body.style.width = '100%';
}
function unlockPageScroll() {
  document.documentElement.classList.remove('is-modal-open');
  document.body.classList.remove('is-modal-open');
  document.body.style.position = '';
  document.body.style.top = '';
  document.body.style.left = '';
  document.body.style.right = '';
  document.body.style.width = '';
  window.scrollTo(0, __scrollY);
}

// === Letters slider: –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã (–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã) ===
(function initLettersSliderLoop(){
  const root  = document.querySelector('.letters-slider');
  if (!root) return;

  const track = root.querySelector('.letters-track');
  const prev  = root.querySelector('.letters-btn.prev');
  const next  = root.querySelector('.letters-btn.next');
  if (!track) return;

  const GAP = 12;

  // 1) –û—Ä–∏–≥–∏–Ω–∞–ª—ã
  const originals = Array.from(track.querySelectorAll('.letter-card:not(.is-clone)'));
  const N = originals.length;
  if (N < 2) return;

  // 2) –ö–ª–æ–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑
  if (!track.__loopReady){
    const firstClone = originals[0].cloneNode(true);
    const lastClone  = originals[N-1].cloneNode(true);
    firstClone.classList.add('is-clone');
    lastClone.classList.add('is-clone');
    track.insertBefore(lastClone, originals[0]); // [CL, 0..N-1]
    track.appendChild(firstClone);               // [CL, 0..N-1, CF]
    track.__loopReady = true;
  }

  // 3) –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ (—Å –∫–ª–æ–Ω–∞–º–∏)
  const cards = Array.from(track.querySelectorAll('.letter-card'));
  const leftCloneIndex  = 0;
  const rightCloneIndex = cards.length - 1;

  // 4) –ò–∑–º–µ—Ä–µ–Ω–∏–µ —à–∞–≥–∞: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ª–µ–≤—ã–º–∏ –∫—Ä–∞—è–º–∏ –¥–≤—É—Ö —Å–æ—Å–µ–¥–Ω–∏—Ö –û–†–ò–ì–ò–ù–ê–õ–û–í
  function measureSlot(){
    if (cards.length < 3) {
      // –ï—Å–ª–∏ –º–∞–ª–æ –∫–∞—Ä—Ç–æ—á–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é
      return cards[1]?.getBoundingClientRect().width + GAP || 320;
    }
    const a = cards[1].getBoundingClientRect().left;  // —Ñ–∏–∑. –∏–Ω–¥–µ–∫—Å 1 = –ª–æ–≥–∏—á–µ—Å–∫–∏–π 0
    const b = cards[2].getBoundingClientRect().left;  // —Ñ–∏–∑. –∏–Ω–¥–µ–∫—Å 2 = –ª–æ–≥–∏—á–µ—Å–∫–∏–π 1
    return Math.round(b - a) || (cards[1].getBoundingClientRect().width + GAP);
  }
  function slot(){ return measureSlot(); }

  // 5) –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
  function physFromLogical(li){ // 0..N-1 -> —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å
    return li + 1;              // +1 –∏–∑-–∑–∞ –ª–µ–≤–æ–≥–æ –∫–ª–æ–Ω–∞
  }
  function logicalFromPhys(pi){ // —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π -> –ª–æ–≥–∏—á–µ—Å–∫–∏–π
    if (pi <= 0)         return N-1; // –ª–µ–≤—ã–π –∫–ª–æ–Ω
    if (pi >= N+1)       return 0;   // –ø—Ä–∞–≤—ã–π –∫–ª–æ–Ω
    return pi - 1;                    // —Å–µ—Ä–µ–¥–∏–Ω–∞ ‚Äî –æ–±—ã—á–Ω—ã–π –æ—Ä–∏–≥–∏–Ω–∞–ª
  }

  // 6) –¢–µ–∫—É—â–∏–π —Ñ–∏–∑–∏—á–µ—Å–∫–∏–π –∏–Ω–¥–µ–∫—Å –ø–æ scrollLeft (—É—Å—Ç–æ–π—á–∏–≤–æ)
  function currentPhysIndex(){
    return Math.round(track.scrollLeft / slot());
  }
  function currentLogical(){
    return logicalFromPhys(currentPhysIndex());
  }

  // 7) –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
  function snapPhys(pi, behavior='auto'){
    track.scrollTo({ left: pi * slot(), behavior });
  }
  function snapLogical(li, behavior='auto'){
    const pi = physFromLogical((li+N)%N);
    console.log('üìç SNAP:', { logical: li, physical: pi, behavior });
    snapPhys(pi, behavior);
  }

  // –°—Ç–∞—Ä—Ç: –ª–æ–≥–∏—á–µ—Å–∫–∏–π 0 (—Ñ–∏–∑–∏—á–µ—Å–∫–∏ 1)
  requestAnimationFrame(()=> snapLogical(0, 'auto'));

  // 8) –ö–Ω–æ–ø–∫–∏: —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–µ–∫—Å—ã (–∫–ª–æ–Ω–æ–≤ –Ω–µ –∫–∞—Å–∞–µ–º—Å—è)
  function moveLogical(dir){
    const li = currentLogical();              // 0..N-1
    const nextLi = (li + dir + N) % N;        // –∫–æ–ª—å—Ü–æ
    
    console.log('üîÑ MOVE:', {
      direction: dir > 0 ? '‚Üí' : '‚Üê',
      currentLogical: li,
      nextLogical: nextLi,
      N: N,
      cardsLength: cards.length
    });
    
    // –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π ¬´—Ç–µ–ª–µ–ø–æ—Ä—Ç¬ª –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –∫—Ä–∞–π, –≤–Ω—É—Ç—Ä–∏ ‚Äî –ø–ª–∞–≤–Ω–æ
    // (–≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ –º—ã —Å—Ç–∞–≤–∏–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ü–µ–ª—å, —Ñ–∏–∑–∏–∫–∞ –∏ maxScroll –Ω–µ –º–µ—à–∞—é—Ç)
    snapLogical(nextLi, 'smooth');
  }

  prev?.addEventListener('click', ()=> moveLogical(-1));
  next?.addEventListener('click', ()=> moveLogical(+1));

  // 9) Drag/swipe –±–µ–∑ pointer-capture
  let isDown=false, startX=0, startScroll=0, moved=0;
  const dragThreshold=5;
  track.addEventListener('pointerdown', e=>{ isDown=true; moved=0; startX=e.clientX; startScroll=track.scrollLeft; });
  track.addEventListener('pointermove', e=>{
    if (!isDown) return;
    const dx=e.clientX-startX; moved=Math.max(moved, Math.abs(dx));
    track.scrollLeft = startScroll - dx;
  });
  ['pointerup','pointercancel','mouseleave'].forEach(ev=>track.addEventListener(ev, ()=>{ isDown=false; }));
  track.addEventListener('click', e=>{ if (moved>dragThreshold){ e.preventDefault(); e.stopPropagation(); } });

  // 10) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–µ (–µ—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –Ω–∞ –∫–ª–æ–Ω)
  const debounce = (fn, t=60)=>{ let id=null; return (...a)=>{ clearTimeout(id); id=setTimeout(()=>fn(...a), t); }; };
  track.addEventListener('scroll', debounce(()=>{
    const pi = currentPhysIndex();
    if (pi === leftCloneIndex)  snapLogical(N-1, 'auto'); // —Å –ª–µ–≤–æ–≥–æ –∫–ª–æ–Ω–∞ ‚Üí –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–π N-1
    if (pi === rightCloneIndex) snapLogical(0,   'auto'); // —Å –ø—Ä–∞–≤–æ–≥–æ –∫–ª–æ–Ω–∞ ‚Üí –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–π 0
  }, 40));

  // 11) –†–µ—Å–∞–π–∑: –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ –ª–æ–≥–∏–∫–µ (–∏—Å–∫–ª—é—á–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ —à–∏—Ä–∏–Ω—ã)
  window.addEventListener('resize', debounce(()=>{
    snapLogical(currentLogical(), 'auto');
  }, 150));
})();

// === –û–±—â–∏–π –ª–∞–π—Ç–±–æ–∫—Å (–ø–∏—Å—å–º–∞ + —Ñ–æ—Ç–æ) —Å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª–∏–∫–æ–º + —Å–≤–∞–π–ø + –ø—Ä–µ–ª–æ–∞–¥ ===
(function initImageLightbox(){
  const modal    = document.getElementById('letter-modal');
  const modalImg = modal?.querySelector('.letter-modal-img');
  const closeBtn = modal?.querySelector('.modal__close');
  const overlay  = modal?.querySelector('.modal__overlay');
  if (!modal || !modalImg) return;

  // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞—ë–≤ –æ–∫–Ω–∞ (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–∏–ø–∞–ª–æ)
  const PADDING = 64; // px (32 —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)

  function fitToViewport(imgEl){
    if (!modal.classList.contains('active')) return;
    // –ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–∞
    const natW = imgEl.naturalWidth  || imgEl.width  || 1000;
    const natH = imgEl.naturalHeight || imgEl.height || 1400;

    // –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ (–º–∏–Ω—É—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–æ–ª—è)
    const vw = Math.max(0, window.innerWidth  - PADDING);
    const vh = Math.max(0, window.innerHeight - PADDING);

    // –ú–∞—Å—à—Ç–∞–± –±–µ–∑ –æ–±—Ä–µ–∑–∫–∏
    const scale = Math.min(vw / natW, vh / natH, 1); // –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–≤–µ—Ä—Ö 100% –∫–∞—á–µ—Å—Ç–≤–∞
    const w = Math.floor(natW * scale);
    const h = Math.floor(natH * scale);

    imgEl.style.width  = w + 'px';
    imgEl.style.height = h + 'px';
  }

  // –ü—É–±–ª–∏—á–Ω—ã–π —Ö—É–∫: –≤—ã–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ src
  function applySizingWhenReady(){
    if (modalImg.complete) fitToViewport(modalImg);
    else modalImg.addEventListener('load', ()=>fitToViewport(modalImg), { once:true });
  }

  // –ü–µ—Ä–µ—Å—á—ë—Ç –Ω–∞ —Ä–µ—Å–∞–π–∑ (debounce)
  window.addEventListener('resize', debounce(()=>{
    if (modal.classList.contains('active')) fitToViewport(modalImg);
  }, 100));

  function srcFromCard(card){
    const img = card.querySelector('img');
    return card.getAttribute('data-full') || img?.src || '';
  }
  function altFromCard(card){
    const img = card.querySelector('img');
    return img?.alt || '';
  }

  // –ü—Ä–µ–ª–æ–∞–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–æ—Å–µ–¥–Ω–µ–π –∫–∞—Ä—Ç–æ—á–∫–∏
  const preload = (i)=>{
    const el = currentList[i]; if (!el) return;
    const src = srcFromCard(el);
    if (!src) return;
    const im = new Image(); im.src = src;
  };

  let currentList = []; // –º–∞—Å—Å–∏–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ–∫—Ü–∏–∏
  let index = -1;
  let groupName = '';

  function openFromCard(card){
    const container = card.closest('.letters-slider, .photos-slider');
    if (!container) return;

    // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è ‚Üê ‚Üí
    const selector = card.hasAttribute('data-letter-modal') ? '[data-letter-modal]' : '[data-image-modal]';
    currentList = Array.from(container.querySelectorAll(selector));
    index = currentList.indexOf(card);
    groupName = card.hasAttribute('data-letter-modal') ? 'letters' : 'photos';

    const src = srcFromCard(card);
    const alt = altFromCard(card);
    if (!src) return;

    modalImg.src = src;
    modalImg.alt = alt || '';
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–µ–ª—ã–π —Ñ–æ–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–ø–∏—Å—å–º–∞/—Ñ–æ—Ç–æ)
    if (groupName === 'photos') modal.classList.add('modal--photo');
    else modal.classList.remove('modal--photo');
    modal.classList.add('active');
    lockPageScroll(); // –±–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    if (typeof ym === 'function') ym(COUNTER_ID, 'reachGoal', 'lightbox_open_' + groupName);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    applySizingWhenReady();
    
    // –ü—Ä–µ–ª–æ–∞–¥ —Å–æ—Å–µ–¥–µ–π
    preload((index+1)%currentList.length);
    preload((index-1+currentList.length)%currentList.length);
  }

  // –î–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É ‚Äî —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –ø—Ä–∏ —Å–ª–æ–∂–Ω–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  document.addEventListener('click', (e)=>{
    const card = e.target.closest?.('[data-letter-modal], [data-image-modal]');
    if (!card) return;
    openFromCard(card);
  });

  function closeModal(){
    modal.classList.remove('active');
    unlockPageScroll(); // –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    modalImg.src = '';
    index = -1; currentList = []; groupName = '';
  }

  function navigate(dir){
    if (!currentList.length || index < 0) return;
    index = (index + dir + currentList.length) % currentList.length;
    const card = currentList[index];
    modalImg.src = srcFromCard(card);
    modalImg.alt = altFromCard(card);
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    applySizingWhenReady();
    // –ü—Ä–µ–ª–æ–∞–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    preload((index+dir+currentList.length)%currentList.length);
  }

  closeBtn?.addEventListener('click', closeModal);
  overlay?.addEventListener('click', closeModal);
  modalImg?.addEventListener('click', closeModal);

  document.addEventListener('keydown', (e)=>{
    if (!modal.classList.contains('active')) return;
    if (e.key === 'Escape')     closeModal();
    if (e.key === 'ArrowRight') navigate(+1);
    if (e.key === 'ArrowLeft')  navigate(-1);
  });

  // –°–≤–∞–π–ø –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏
  let down=false, sx=0;
  modal.addEventListener('pointerdown', e=>{ down=true; sx=e.clientX; });
  modal.addEventListener('pointerup', e=>{
    if(!down) return; down=false;
    const dx=e.clientX-sx;
    if (Math.abs(dx)>40) navigate(dx<0?+1:-1);
  });
})();

// === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ç–æ-—Å–ª–∞–π–¥–µ—Ä–∞ (–±–µ–∑ pointer-capture; –∞–≤—Ç–æ-—à–∏—Ä–∏–Ω–∞ –ø–æ –∞—Å–ø–µ–∫—Ç—É) ===
(function initPhotosSlider(){
  const root = document.querySelector('.photos-slider');
  if (!root) return;

  const track = root.querySelector('.photos-track');
  const cards = Array.from(track.querySelectorAll('.photo-card'));
  const prev  = root.querySelector('.photos-btn.prev');
  const next  = root.querySelector('.photos-btn.next');
  if (!track) return;

  function fitCardWidth(card, img){
    const h  = card.getBoundingClientRect().height;
    const w  = img.naturalWidth  || img.width;
    const nh = img.naturalHeight || img.height;
    if (!w || !nh || !h) return;
    const ratio = w / nh;
    const target = Math.max(160, Math.min(h * ratio, 1000));
    card.style.width = `${Math.round(target)}px`;
  }
  function layout(){
    cards.forEach(card=>{
      const img = card.querySelector('img'); if (!img) return;
      if (img.complete) fitCardWidth(card, img);
      else img.addEventListener('load', ()=>fitCardWidth(card, img), { once:true });
    });
  }

  const scrollStep = () => track.clientWidth * 0.9;
  const scrollByX  = dir => track.scrollBy({ left: dir * scrollStep(), behavior:'smooth' });
  prev?.addEventListener('click', ()=>scrollByX(-1));
  next?.addEventListener('click', ()=>scrollByX( 1));

  track.addEventListener('keydown', (e)=>{
    if (e.key === 'ArrowRight') scrollByX(1);
    if (e.key === 'ArrowLeft')  scrollByX(-1);
  });

  // Drag / Swipe –±–µ–∑ pointer-capture
  let isDown = false, startX = 0, startScroll = 0, moved = 0;
  const dragThreshold = 5;

  track.addEventListener('pointerdown', (e)=>{
    isDown = true; moved = 0;
    startX = e.clientX; startScroll = track.scrollLeft;
  });
  track.addEventListener('pointermove', (e)=>{
    if(!isDown) return;
    const dx = e.clientX - startX;
    moved = Math.max(moved, Math.abs(dx));
    track.scrollLeft = startScroll - dx;
  });
  ['pointerup','pointercancel','mouseleave'].forEach(ev=>{
    track.addEventListener(ev, ()=>{ isDown=false; });
  });
  track.addEventListener('click', (e)=>{ if (moved > dragThreshold) { e.stopPropagation(); e.preventDefault(); } });

  layout();
  let t=null; window.addEventListener('resize', ()=>{ clearTimeout(t); t=setTimeout(layout, 120); });
})();
